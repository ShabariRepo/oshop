import { Observable } from 'rxjs/Observable';
import { ShoppingCart } from './models/shopping-cart';
import { Product } from './models/product';
import { AngularFireDatabase, FirebaseObjectObservable } from 'angularfire2/database';
import { Injectable } from '@angular/core';
import 'rxjs/add/operator/take'; 
import 'rxjs/add/operator/map';

@Injectable()
export class ShoppingCartService {

  constructor(private db: AngularFireDatabase) { }

  // whenever you use a map operator it will give regular observable not firebase kind
  async getCart(): Promise<Observable<ShoppingCart>> {
    // the cart Id can be generated by getOrCreateCartId()
    let cartId = await this.getOrCreateCartId();

    return this.db.object('/shopping-carts/' + cartId).map(x => new ShoppingCart(x.items));
  }

  // keep api simple so not accessible from outside
  // only focus is to get a reference to the shopping cart and does not post products to cart
  // decorating the async keyword means the method returns a promise
  // the : Primise<string> is an annotation that will tell TS compiler that that is what it returns the type so when you hover over the callback var it will show that
  private async getOrCreateCartId(): Promise<string> {
    // if you misspell this cart Id then it will create multiple cart ids in the db and make new values for cartId in developer tools
    let cartId = localStorage.getItem('cartId');

    // change the method to return the cartId instead of a whole object which may take longer
    // if we do have cart id then return it if not then...
    if (cartId) return cartId;

    // async method will get the result of the create in a separate thread
    let result = await this.create();
    localStorage.setItem('cartId', result.key);

    // then add the product to cart
    return result.key;
  }

  // get the cart id and remove from db
  async claarCart() {
    let cartId = await this.getOrCreateCartId();
    this.db.object('/shopping-carts/' + cartId + '/items').remove();
  }

  async addToCart(product: Product) { 
    this.updateItem(product, 1);
  }

  async removeFromCart(product: Product) {
    this.updateItem(product, -1);
  }

  // create an entry under the shopping cart table in db
  private create() { 
    return this.db.list('/shopping-carts/').push({ dateCreated: new Date().getTime() });
  }

  private getItem(cartId: string, productId: string) {
    // get reference to the product in the shopping cart
    // the products in the shopping cart is in an array
    // its an observable for a shopping cart item
    return this.db.object('/shopping-carts/' + cartId + '/items/' + productId);
  }
  
  private async updateItem(product: Product, change: number) {
    let cartId = await this.getOrCreateCartId();

    let item$ = this.getItem(cartId, product.$key);
    // subscribe to this observable to read it and dont want to unsubscribe later so to avoid the hassle use the take rxjs import
    // if the item exists then update the count else add first    
    // rid of if and else statements and run below kind of like a conditional but intuitive
    item$.take(1).subscribe(item => {
      let quantity = (item.quantity || 0) + change;
      if(quantity === 0) item$.remove();
      else item$.update({ 
        title: product.title,
        imageUrl: product.imageUrl,
        price: product.price,
        quantity: quantity
      });
    });
  }
}